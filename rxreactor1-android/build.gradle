apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'jacoco'
apply plugin: 'org.jetbrains.dokka'
apply plugin: 'maven-publish'
apply from: "$rootDir/gradle/library-artifacts.gradle"
//apply from: "$rootDir/gradle/jacoco-android.gradle"

android {
    compileSdkVersion buildConfig.compileSdk

    defaultConfig {
        namespace 'com.gyurigrell.rxreactor1.android'
        minSdkVersion buildConfig.minSdk
        targetSdkVersion buildConfig.targetSdk

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }

    buildTypes {
        debug {
            testCoverageEnabled = true
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lint {
        abortOnError false
        baseline file('lint-baseline.xml')
    }
}

dependencies {
    api project(path: ':rxreactor1')

    api libs.rx1.java
    implementation libs.rx1.android

//    testImplementation libs.junit
}

tasks.withType(Test).configureEach {
    jacoco.includeNoLocationClasses = true
}

//jacoco {
//    toolVersion = libs.versions.jacoco
//}

dokkaJavadoc.configure {
    dokkaSourceSets {
        named("main") {
            noAndroidSdkLink.set(false)
            includeNonPublic.set(false)
        }
    }
}

afterEvaluate {
    publishing {
        publications {
            RxReactor1Android(MavenPublication) {
                groupId = project.group
                artifactId = archivesBaseName

                from components.release
                artifact releaseSourcesJar
                artifact javadocJar

                pom {
                    name = "RxReactor (RxJava 1) for Android"
                    description = "A Kotlin framework for a reactive and unidirectional RxJava 1 application architecture"
                    url = POM_URL

                    licenses {
                        license {
                            name = POM_LICENSE_NAME
                            url = POM_LICENSE_URL
                        }
                    }

                    developers {
                        developer {
                            id = POM_DEVELOPER_ID
                            name = POM_DEVELOPER_NAME
                            email = POM_DEVELOPER_EMAIL
                        }
                    }

                    scm {
                        connection = POM_SCM_CONNECTION
                        developerConnection = POM_SCM_CONNECTION
                        url = POM_SCM_URL
                    }
                }
            }
        }
    }

    signing {
        def signingKeyId = findProperty("signingKeyId")
        def signingKey = findProperty("signingKey")
        def signingPassword = findProperty("signingPassword")
        useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)

        sign publishing.publications
    }

    tasks.withType(Sign).configureEach {
        onlyIf { findProperty("signingKey") != null }
    }
}
