apply plugin: 'java-library'
apply plugin: 'kotlin'
apply plugin: 'jacoco'
apply plugin: 'org.jetbrains.dokka'
apply plugin: 'maven-publish'

dependencies {
    api libs.rx1.java
    api libs.rx1.relay

    testImplementation libs.junit
}

jacoco {
    toolVersion = libs.versions.jacoco
}

jacocoTestReport {
    reports {
        xml.required = true
    }
}

dokkaJavadoc.dokkaSourceSets.configureEach { includeNonPublic.set(false) }

//tasks.register('sourcesJar', Jar) {
//    dependsOn classes
//    classifier "sources"
//    from sourceSets.main.allSource
//}
//
//tasks.register('javadocJar', Jar) {
//    dependsOn dokkaJavadoc
//    classifier "javadoc"
//    from dokkaJavadoc.outputDirectory
//}

//publishing {
//    publications {
//        RxReactor1(MavenPublication) {
//            groupId = project.group
//            artifactId = archivesBaseName
//
//            from components.java
//            artifact sourcesJar
//            artifact javadocJar
//
//            pom {
//                name = "RxReactor (RxJava 1)"
//                description = "A Kotlin framework for a reactive and unidirectional RxJava 1 application architecture"
//                url = POM_URL
//
//                licenses {
//                    license {
//                        name = POM_LICENSE_NAME
//                        url = POM_LICENSE_URL
//                    }
//                }
//
//                developers {
//                    developer {
//                        id = POM_DEVELOPER_ID
//                        name = POM_DEVELOPER_NAME
//                        email = POM_DEVELOPER_EMAIL
//                    }
//                }
//
//                scm {
//                    connection = POM_SCM_CONNECTION
//                    developerConnection = POM_SCM_CONNECTION
//                    url = POM_SCM_URL
//                }
//            }
//        }
//    }
//}

signing {
    def signingKeyId = findProperty("signingKeyId")
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)

    sign publishing.publications
}

tasks.withType(Sign) {
    onlyIf { findProperty("signingKey") != null }
}
